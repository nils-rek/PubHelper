.libPaths("C:/Users/nkapp/R")
getwd()
document()
library("roxygen2")
document()
library("devtools")
document()
document()
library("roxygen2")
library("devtools")
.libPaths("C:/Users/nkapp/R")
library("roxygen2")
document()
getwd()
library("devtools")
document()
data("airquality")
airquality$Period = ifelse(airquality$Month %in% 5:7, "Early Summer", "Late Summer")
head(airquality)
?airquality
baselineTable(data = airquality, vars = c("Ozone", "Solar.R", "Wind", "Temp", "Period"),
labels = c("Ozone (ppb)", "Solar R (lang)", "Wind (mph)", "Temperature (degrees F)", "Period"))
baselineTable(data = airquality, vars = c("Ozone", "Solar.R", "Wind", "Temp"),
labels = c("Ozone (ppb)", "Solar R (lang)", "Wind (mph)", "Temperature (degrees F)"),
grouping.var = "Period", round_dec = 1)
?t.test
welch.test = TRUE
welch.test
!welch.test
welch.test = FALSE
!welch.test
placeholder
placeholder = "   "
placeholder
paste0(placeholder, c("Mean (SD)",
"Median (IQR)"))
paste0(placeholder, "Median (IQR)")
library("devtools")
document()
SDfromCI <- function(n = NA, ci.lb = NA, ci.ub = NA)  {
# Check input arguments
if(sum(is.na(c(n, ci.lb, ci.ub))) >= 1)  {
stop("Please define all input arguments for computation of the pooled mean")
}
# Formula for SD inference
sd <- sqrt(n) * (ci.ub - ci.lb) / 3.92
# Return output
return(sd)
}
SDfromCI(n = 30, ci.lb = -0.1, ci.ub = 0.2)
sdpooled <- function(n1 = NA, n2 = NA, sd1 = NA, sd2 = NA)  {
# Check input arguments
if(sum(is.na(c(n1, n2, sd1, sd2))) >= 1)  {
stop("Please define all input arguments for computation of the pooled standard deviation")
}
# Pooled SD formula
sd_pooled <- sqrt(((n1 - 1) * sd1^2 + (n2 - 1) * sd2^2) / (n1 + n2 - 2))
# Return output
return(sd_pooled)
}
sdpooled(n1 = 30, n2 = 20, sd1 = 15, sd2 = 20)
meanpooled <- function(n1 = NA, n2 = NA, mean1 = NA, mean2 = NA)  {
# Check input arguments
if(sum(is.na(c(n1, n2, mean1, mean2))) >= 1)  {
stop("Please define all input arguments for computation of the pooled mean")
}
# Pooled Mean formula
mean_pooled <- (n1 * mean1 + n2 * mean2) / (n1 + n2)
# Return output
return(mean_pooled)
}
meanpooled(n1 = 30, n2 = 20, mean1 = 15, mean2 = 20)
devtools::document()
