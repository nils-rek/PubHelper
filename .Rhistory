## Check if input arguments are present
if(is.null(d))  {stop("data needs to be specified.")}
if(is.null(x))  {stop("x needs to be specified.")}
if(is.null(y))  {stop("y needs to be specified.")}
## Get grid
output = expand.grid(y = y, x = x, stringsAsFactors = FALSE)
## Get formula
output$formula = paste0(output$y, "~", output$x)
if(!is.null(z)) {
z.comb = paste(z, collapse = "+")
output$formula = paste(output$formula, z.comb, sep = "+")
}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
## Add results to data
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
output[,colnames(GLMTables)] = GLMTables
## Add complex model results if simplify = FALSE
if(simplify == FALSE) {
output$models = models
output$GLMTables = map(models, getGLMTable)
}
return(output)
}
data(airquality)
head(airquality)
model = lm(Ozone~Solar.R)
model = lm(Ozone~Solar.R, data = airquality)
summary(model)
getGLMTable(model)
head(airquality)
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = c("Temp", "Month"))
mapGLMTables = function(
data = NULL,
y = NULL,
x = NULL,
z = NULL,
model.type = "lm",
simplify = TRUE
) {
## Add required packages
require("tidyverse")
## Rename data to avoid recursive errors
d = data
## Check if input arguments are present
if(is.null(d))  {stop("data needs to be specified.")}
if(is.null(x))  {stop("x needs to be specified.")}
if(is.null(y))  {stop("y needs to be specified.")}
## Get grid
output = expand.grid(y = y, x = x, stringsAsFactors = FALSE)
## Get formula
output$formula = paste0(output$y, "~", output$x)
if(!is.null(z)) {
z.comb = paste(z, collapse = "+")
output$formula = paste(output$formula, z.comb, sep = "+")
}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
## Add results to data
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
output[,colnames(GLMTables)] = GLMTables
## Add complex model results if simplify = FALSE
if(simplify == FALSE) {
output$models = models
output$GLMTables = map(models, getGLMTable)
}
return(output)
}
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = c("Temp", "Month"))
complex = mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = "Temp", simplify = FALSE)
str(complex)
View(complex)
complex$GLMTables[[1]]
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = "Temp", simplify = TRUE, model.type = "lm")
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = "Temp", simplify = TRUE, model.type = "glm")
airquality$lateSummer = ifelse(airquality$Month > 7, 1, 0)
mapGLMTables(data = airquality, y = "lateSummer", x = c("Solar.R", "Wind"), z = "Temp", simplify = TRUE, model.type = "glm")
library("devtools")
.libPaths("C:/Users/nkapp/R")
library("devtools")
devtools::document()
.libPaths("C:/Users/nkapp/R")
library("devtools")
install_github("nkappelmann/PubHelper")
library("PubHelper")
?mapGLMTables
data(airquality)
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = "Temp")
.libPaths("C:/Users/nkapp/R")
library("PubHelper")
?mapGLMTables
library("devtools")
.libPaths("C:/Users/nkapp/R")
library("devtools")
devtools::document()
.libPaths("C:/Users/nkapp/R")
library("PubHelper")
data(airquality)
head(airquality)
table(airquality$Month)
airquality$Month_fac = factor(airquality$Month)
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Month_fac"), z = "Temp")
mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Month_fac"), z = "Temp", simplify = FALSE)
.libPaths("C:/Users/nkapp/R")
require("tidyverse")
data(airquality)
airquality$Month_fac = factor(airquality$Month)
head(airquality)
data = airquality
y = "Ozone"
x = "Month_fac"
x = c("Month_fac", "Solar.R")
z = "Wind"
## Rename data to avoid recursive errors
d = data
if(is.null(d))  {stop("data needs to be specified.")}
if(is.null(x))  {stop("x needs to be specified.")}
if(is.null(y))  {stop("y needs to be specified.")}
## Get grid
output = expand.grid(y = y, x = x, stringsAsFactors = FALSE)
## Get formula
output$formula = paste0(output$y, "~", output$x)
if(!is.null(z)) {
z.comb = paste(z, collapse = "+")
output$formula = paste(output$formula, z.comb, sep = "+")
}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
model.type = "lm"
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
class(data[, x])
x
any(class(data[x]))
class(data[,any(x)])
lapply(data[,x], class)
sapply(data[,x], class)
map_chr(data[,x], class)
"factor" %in% map_chr(data[,x], class)
x["factor" %in% map_chr(data[,x], class)]
x[map_chr(data[,x], class) == "factor"]
levels(data[x_factor])
levels(data[,x_factor])
# Check if this factor has >2 levels
x_factor = x[map_chr(data[,x], class) == "factor"]
levels(data[,x_factor])
length(levels(data[,x_factor]))
data[,x_factor] %>%
map(levels) %>%
map_dbl(levels)
data[,x_factor] %>%
map(levels)
x_factor
airquality$Month_fac2 = airquality$Month_fac
x
x = c("Month_fac", "Solar.R", "Month_fac2")
# Check if this factor has >2 levels
x_factor = x[map_chr(data[,x], class) == "factor"]
x
head(airquality)
d = airquality
data = d
# Check if this factor has >2 levels
x_factor = x[map_chr(d[,x], class) == "factor"]
x_factor
data[,x_factor] %>%
levels()
?apply
data[,x_factor] %>%
apply(2, levels)
d[,x_factor] %>%
apply(1, levels)
d[,x_factor] %>%
map_dbl(nlevels)
d[,x_factor] %>%
map_dbl(nlevels)
d[,x_factor] %>%
map_dbl(nlevels) %>%
any() > 2
d[,x_factor] %>%
map_dbl(nlevels) > 2
d[,x_factor] %>%
map_dbl(nlevels) > 2 %>% any()
factor_with_many_levels = d[,x_factor] %>%
map_dbl(nlevels) > 2
any(factor_with_many_levels) == TRUE
# Check if this factor has >2 levels
x_factor = x[map_chr(d[,x], class) == "factor"]
factor_with_many_levels = d[,x_factor] %>%
map_dbl(nlevels) > 2
factor_with_many_levels = any(factor_with_many_levels) == TRUE
factor_with_many_levels
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
#' Get a Table of GLM results
#'
#' This function creates a table including output from common GLM models. formatGLMtable offers further formatting for direct inclusion in scientific publications
#' @param model Data needs to be entered that includes relevant variables for the baseline table
#' @param intercept Should intercepts be included in the output? Default is TRUE.
#' @param exclude.covariates Specify covariates that should be excluded from the output.
#' @param fit.indices Should all fit indices from broom::glance be included? Default is FALSE.
#' @param polr.assumptioncheck Only if ordinal logistic regression is used. This calculates a multinomial model using the nnet package with the same formula as the ordinal logistic regression model. If included, a p-value for the proportionality assumption will be included in the output under column name prop.test. Note that this code only works if variables aren't converted inside the fomula (i.e., factor(Y) ~ X does not work).
#' @keywords GLM; table
#' @export
#' @author Nils Kappelmann
#' @examples
#' data(airquality)
#' model = lm(Temp ~ Wind, data = airquality)
#' getGLMTable(model = model)
getGLMTable = function(
model = NULL,
intercept = TRUE,
exclude.covariates = NULL,
fit.indices = FALSE,
polr.assumptioncheck = FALSE
) {
# Load required broom package
require("broom")
# Check if model was specified
if(is.null(model))  {stop("Model must be specified.")}
# Get GLM class
glm_class = class(model)
## Call correct formatting function depending on glm_class
if(identical(glm_class, "lm")) {
output = format_lm(lm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices)
} else if(identical(glm_class, c("glm", "lm"))) {
output = format_loglm(loglm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices)
} else if(identical(glm_class, "polr")) {
output = format_polr(polr.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices)
} else  {stop("GLMTable function not yet defined for model class.")}
## Exclude intercept if indicated
if(intercept == FALSE)  {output = output[output$term != "(Intercept)",]}
## Return output
return(output)
}
# format_lm--------------------------
format_lm = function(
lm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices
) {
## Extract model output
output = broom::tidy(lm.object, conf.int = TRUE, conf.level = 0.95)
## Exclude covariates
if(!is.null(covars.to.exclude))  {
output = excludeCovariates(output, covars.to.exclude)
}
## Exctract fit indices
glance.model = glance(lm.object)
# Delete non-required fit indices
if(fit.stats == FALSE)  {
glance.model = glance.model[, c("r.squared", "adj.r.squared", "nobs")]
}
# Add fit indices to output
if(nrow(output) > 1)  {
for(i in 1:(nrow(output) - 1))  {
glance.model = rbind(rep(NA, ncol(glance.model)), glance.model)
}
}
output[, colnames(glance.model)] = glance.model
## Return output
return(output)
}
# format_loglm-----------------------
format_loglm = function(
loglm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices
) {
## Extract model output
output = broom::tidy(loglm.object, conf.int = TRUE, conf.level = 0.95)
## Add OR and convert CI
output$OR = exp(output$estimate)
temp.conf.int = exp(output[, c("conf.low", "conf.high")])
output[, c("conf.low", "conf.high")] = NULL
output[, c("conf.low", "conf.high")] = temp.conf.int
rm(temp.conf.int)
## Exclude covariates
if(!is.null(covars.to.exclude))  {
output = excludeCovariates(output, covars.to.exclude)
}
## Exctract fit indices
glance.model = glance(loglm.object)
# Delete non-required fit indices
if(fit.stats == FALSE)  {
glance.model = glance.model[, "nobs"]
}
# Add fit indices to output
if(nrow(output) > 1)  {
for(i in 1:(nrow(output) - 1))  {
glance.model = rbind(rep(NA, ncol(glance.model)), glance.model)
}
}
output[, colnames(glance.model)] = glance.model
## Return output
return(output)
}
# format_polr------------------------
format_polr = function(
polr.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices,
polr.check = polr.assumptioncheck
) {
## Extract model output
output = broom::tidy(polr.object, conf.int = TRUE, conf.level = 0.95)
## Delete intercepts and coef.type column
output = output[output$coef.type == "coefficient",]
output$coef.type = NULL
## Add OR and convert CI
output$OR = exp(output$estimate)
temp.conf.int = exp(output[, c("conf.low", "conf.high")])
output[, c("conf.low", "conf.high")] = NULL
output[, c("conf.low", "conf.high")] = temp.conf.int
rm(temp.conf.int)
## Exclude covariates
if(!is.null(covars.to.exclude))  {
output = excludeCovariates(output, covars.to.exclude)
}
## Exctract fit indices
glance.model = glance(polr.object)
# Delete non-required fit indices
if(fit.stats == FALSE)  {
glance.model = glance.model[, "nobs"]
}
# Add fit indices to output
if(nrow(output) > 1)  {
for(i in 1:(nrow(output) - 1))  {
glance.model = rbind(rep(NA, ncol(glance.model)), glance.model)
}
}
output[, colnames(glance.model)] = glance.model
## Run mlm assumption if polr.check = TRUE
if(polr.check == TRUE)  {
# Get mlm data and change colnames
mlm.dat = polr.object$model
mlm.model = nnet::multinom(formula = deparse(formula(polr.object)),
data = polr.object$model,
Hess = "Hessian" %in% names(polr.object))
M1 = logLik(polr.object)
M2 = logLik(mlm.model)
G = -2 * (M1[1] - M2[1])
output[nrow(output), "prop.test"] = pchisq(G, 3, lower.tail = FALSE)
## Remove temporary variables
rm(M1); rm(M2); rm(G)
} else  {output[nrow(output), "prop.test"] = NA}
## Return output
return(output)
}
# format_lm--------------------------
# excludeCovariates------------------
excludeCovariates = function(
x,
exclude.from.x
)  {
x = x[!grepl(paste(exclude.from.x, collapse = "|"), x$term),]
return(x)
}
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
GLMTables
## Add required packages
require("tidyverse")
## Rename data to avoid recursive errors
d = data
## Check if input arguments are present
if(is.null(d))  {stop("data needs to be specified.")}
if(is.null(x))  {stop("x needs to be specified.")}
if(is.null(y))  {stop("y needs to be specified.")}
## Get grid
output = expand.grid(y = y, x = x, stringsAsFactors = FALSE)
## Get formula
output$formula = paste0(output$y, "~", output$x)
if(!is.null(z)) {
z.comb = paste(z, collapse = "+")
output$formula = paste(output$formula, z.comb, sep = "+")
}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
## Check if any x variables are factors with >2 levels
if("factor" %in% map_chr(d[,x], class))  {
# Check if this factor has >2 levels
x_factor = x[map_chr(d[,x], class) == "factor"]
factor_with_many_levels = d[,x_factor] %>%
map_dbl(nlevels) > 2
factor_with_many_levels = any(factor_with_many_levels) == TRUE
} else  {factor_with_many_levels = FALSE}
## Add results to data
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
if(factor_with_many_levels == FALSE)  {
output[,colnames(GLMTables)] = GLMTables
}
## Add complex model results if simplify = FALSE
if(simplify == FALSE) {
output$models = models
output$GLMTables = map(models, getGLMTable)
if(factor_with_many_levels == TRUE) {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and individual model results can be obtained using $GLMTables[[n]].")
}
}
output
map(models, getGLMTable)
output$models = models
output$GLMTables = map(models, getGLMTable)
simplify
simplify = TRUE
## Add required packages
require("tidyverse")
## Rename data to avoid recursive errors
d = data
## Check if input arguments are present
if(is.null(d))  {stop("data needs to be specified.")}
if(is.null(x))  {stop("x needs to be specified.")}
if(is.null(y))  {stop("y needs to be specified.")}
## Get grid
output = expand.grid(y = y, x = x, stringsAsFactors = FALSE)
## Get formula
output$formula = paste0(output$y, "~", output$x)
if(!is.null(z)) {
z.comb = paste(z, collapse = "+")
output$formula = paste(output$formula, z.comb, sep = "+")
}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
## Check if any x variables are factors with >2 levels
if("factor" %in% map_chr(d[,x], class))  {
# Check if this factor has >2 levels
x_factor = x[map_chr(d[,x], class) == "factor"]
factor_with_many_levels = d[,x_factor] %>%
map_dbl(nlevels) > 2
factor_with_many_levels = any(factor_with_many_levels) == TRUE
} else  {factor_with_many_levels = FALSE}
## Add results to data
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
factor_with_many_levels
if(factor_with_many_levels == FALSE)  {
output[,colnames(GLMTables)] = GLMTables
}
## Add complex model results if simplify = FALSE
if(simplify == FALSE) {
output$models = models
output$GLMTables = map(models, getGLMTable)
if(factor_with_many_levels == TRUE) {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and individual model results can be obtained using $GLMTables[[n]].")
}
}
## Add GLMTables if simplify = TRUE and factor_with_many_levels = TRUE
if(simplify == TRUE & factor_with_many_levels == TRUE)  {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and individual model results can be obtained using $GLMTables[[n]].")
output$GLMTables = map(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
}
## Add GLMTables if simplify = TRUE and factor_with_many_levels = TRUE
if(simplify == TRUE & factor_with_many_levels == TRUE)  {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and\nindividual model results can be obtained using:\n$GLMTables[[n]].")
output$GLMTables = map(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
}
## Add GLMTables if simplify = TRUE and factor_with_many_levels = TRUE
if(simplify == TRUE & factor_with_many_levels == TRUE)  {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and\nindividual model results can be obtained using: $GLMTables[[n]].")
output$GLMTables = map(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
}
output
output$GLMTables[[1]]
