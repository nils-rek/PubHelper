}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
model.type = "lm"
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
## Check if any x variables are factors with >2 levels
if("factor" %in% map_chr(d[,x], class))  {
x_factor = x[map_chr(d[,x], class) == "factor"]
factor_with_many_levels = d[,x_factor] %>%
map_dbl(nlevels) > 2
factor_with_many_levels = any(factor_with_many_levels) == TRUE
} else  {factor_with_many_levels = FALSE}
format.output == FALSE
format.output = FALSE
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
GLMTables
GLMTables = map_dfr(models, formatGLMTable,
intercept = FALSE, exclude.covariates = z)
#' Formatting GLM results for table export
#'
#' This function creates a formatted table including output from common GLM models.
#' @param model Data needs to be entered that includes relevant variables for the baseline table
#' @param round_dec Number of decimal spaces to-be-included in baseline Table. Default is 2
#' @param lm.ci Indicate if 95% confidence interval from LM should be included in output. Default is FALSE.
#' @param ... Other arguments from getGLMTable
#' @keywords GLM; table
#' @export
#' @author Nils Kappelmann
#' @examples
#' data(airquality)
#' model = lm(Temp ~ Wind, data = airquality)
#' formatGLMTable(model = model)
formatGLMTable = function(
model = NULL,
round_dec = 2,
lm.ci = FALSE,
...
) {
# Get GLM class
glm_class = class(model)
# Run getGLMTable to get output data.frame
output = getGLMTable(model = model, ...)
## Format P-value
output$p.value = ifelse(output$p.value < 0.001, "<0.001",
as.character(round(output$p.value, 3)))
## Return output depending on glm_class
if(identical(glm_class, "lm")) {
output = with(output, data.frame(
Term = term,
Estimate.SE = paste0(round(estimate, round_dec), " (",
round(std.error, round_dec), ")"),
CI = paste0(round(conf.low, round_dec), "-", round(conf.high, round_dec)),
T.Value = round(statistic, round_dec),
P = p.value,
R2 = round(r.squared, round_dec),
R2.adj = round(adj.r.squared, round_dec),
N = nobs
))
## Delete CI if indicated
if(lm.ci == FALSE)  {output$CI = NULL}
## Return lm output
return(output)
} else if(identical(glm_class, c("glm", "lm"))) {
output = with(output, data.frame(
Term = term,
Estimate.SE = paste0(round(estimate, round_dec), " (",
round(std.error, round_dec), ")"),
OR.CI = paste0(round(OR, round_dec), " (",
round(conf.int, round_dec), "-",
round(conf.int, round_dec), ")"),
Z.Value = round(statistic, round_dec),
P = p.value
))
## Set Intercept OR to "-"
output[output$Term == "(Intercept)", "OR.CI"] = "-"
## Return lm output
return(output)
} else if(identical(glm_class, "polr")) {
output = with(output, data.frame(
Term = term,
Estimate.SE = paste0(round(estimate, round_dec), " (",
round(std.error, round_dec), ")"),
OR.CI = paste0(round(OR, round_dec), " (",
round(conf.low, round_dec), "-",
round(conf.high, round_dec), ")"),
T.Value = round(statistic, round_dec),
P = p.value,
Proportionality.Test = ifelse(round(prop.test, 3) == 0, "<0.001",
as.character(round(prop.test, 3)))
))
## Set Intercept OR to "-"
output[output$Term == "(Intercept)", "OR.CI"] = "-"
## Return lm output
return(output)
}
}
GLMTables = map_dfr(models, formatGLMTable,
intercept = FALSE, exclude.covariates = z)
GLMTables
.libPaths("C:/Users/nkapp/R")
library("devtools")
devtools::document()
devtools::document()
.libPaths("C:/Users/nkapp/R")
library("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("nkappelmann/PubHelper")
.libPaths("C:/Users/nkapp/R")
devtools::install_github("nkappelmann/PubHelper")
data(airquality)
# Load package
library("PubHelper")
library("tidyverse") # also required
library("broom") # also required
## Load toy data
data(airquality)
head(airquality)
## Run multiple lm models with:
# y = Ozone
# x = Solar.R & Wind
# z(covariates) = Temp & Month
mapGLMTables(data = airquality,
y = "Ozone",
x = c("Solar.R", "Wind"),
z = c("Temp", "Month"),
model.type = "lm") # unformatted output
mapGLMTables(data = airquality,
y = "Ozone",
x = c("Solar.R", "Wind"),
z = c("Temp", "Month"),
model.type = "lm",
format.output = TRUE) # formatted output
## Run logistic models with:
# y = Ozone (median split) & Wind (binary split)
# x = Solar.R
# z(covariates) = Temp & Month
airquality$Ozone_binary =
ifelse(airquality$Ozone > median(airquality$Ozone, na.rm = TRUE),
1, 0)
airquality$Wind_binary =
ifelse(airquality$Wind > median(airquality$Wind, na.rm = TRUE),
1, 0)
head(airquality)
mapGLMTables(data = airquality,
y = c("Ozone_binary", "Wind_binary"),
x = c("Solar.R"),
z = c("Temp", "Month"),
model.type = "glm") # unformatted output
mapGLMTables(data = airquality,
y = c("Ozone_binary", "Wind_binary"),
x = c("Solar.R"),
z = c("Temp", "Month"),
model.type = "glm",
format.output = TRUE) # formatted output
# If not installed:
library("devtools")
install_github("nkappelmann/PubHelper")
.libPaths("C:/Users/nkapp/R")
# If not installed:
library("devtools")
install_github("nkappelmann/PubHelper")
# Load package
library("PubHelper")
library("tidyverse") # also required
library("broom") # also required
## Load toy data
data(airquality)
head(airquality)
## Run multiple lm models with:
# y = Ozone
# x = Solar.R & Wind
# z(covariates) = Temp & Month
mapGLMTables(data = airquality,
y = "Ozone",
x = c("Solar.R", "Wind"),
z = c("Temp", "Month"),
model.type = "lm") # unformatted output
mapGLMTables(data = airquality,
y = "Ozone",
x = c("Solar.R", "Wind"),
z = c("Temp", "Month"),
model.type = "lm",
format.output = TRUE) # formatted output
## Run logistic models with:
# y = Ozone (median split) & Wind (binary split)
# x = Solar.R
# z(covariates) = Temp & Month
airquality$Ozone_binary =
ifelse(airquality$Ozone > median(airquality$Ozone, na.rm = TRUE),
1, 0)
airquality$Wind_binary =
ifelse(airquality$Wind > median(airquality$Wind, na.rm = TRUE),
1, 0)
head(airquality)
mapGLMTables(data = airquality,
y = c("Ozone_binary", "Wind_binary"),
x = c("Solar.R"),
z = c("Temp", "Month"),
model.type = "glm") # unformatted output
mapGLMTables(data = airquality,
y = c("Ozone_binary", "Wind_binary"),
x = c("Solar.R"),
z = c("Temp", "Month"),
model.type = "glm",
format.output = TRUE) # formatted output
.libPaths("C:/Users/nkapp/R")
require("performance")
install.packages("performance")
## Add required packages
require("tidyverse")
require("performance")
#' mapGLMTables: Loop over regression models and extract results.
#'
#' mapGLMTables loops over regression models (linear, logistic, & ordinal logistic) and returns summarised output from getGLMTable. It is possible to include covariates, which are automatically excluded from the output. However, the full output can be obtained as a more complex output by setting simplify=FALSE. Note that a complex model output is returned if predictor variables include factors with >2 levels.
#' @param data Data.frame including model variables
#' @param x Vector of predictor variables
#' @param y Vector of outcome variables
#' @param z Vector of covariates if covariates are included
#' @param model.type Specify which statistical model to run. Options are "lm" for linear regression, "glm" for logistic regression, and "polr" for ordinal logistic regression
#' @param format.output Should output be formatted for scientific publications? Default is FALSE.
#' @param simplify Should results be simplified to relevant regression parameters of the predictor? If not, full lm models, GLMTables, and plots to check model assumptions (using the performance package) are included in the output. Default is simplify=TRUE.
#' @keywords GLM; table
#' @export
#' @author Nils Kappelmann
#' @examples
#' data(airquality)
#' mapGLMTables(data = airquality, y = "Ozone", x = c("Solar.R", "Wind"), z = "Temp")
mapGLMTables = function(
data = NULL,
y = NULL,
x = NULL,
z = NULL,
model.type = "lm",
format.output = FALSE,
simplify = TRUE
) {
## Add required packages
require("tidyverse")
require("performance")
## Rename data to avoid recursive errors
d = data
## Check if input arguments are present
if(is.null(d))  {stop("data needs to be specified.")}
if(is.null(x))  {stop("x needs to be specified.")}
if(is.null(y))  {stop("y needs to be specified.")}
## Get grid
output = expand.grid(y = y, x = x, stringsAsFactors = FALSE)
## Get formula
output$formula = paste0(output$y, "~", output$x)
if(!is.null(z)) {
z.comb = paste(z, collapse = "+")
output$formula = paste(output$formula, z.comb, sep = "+")
}
## Run models
if(model.type == "lm")  {
models = map(output$formula, lm, data = d)
} else if(model.type == "glm")  {
models = map(output$formula, glm, data = d, family = "binomial")
} else if(model.type == "polr") {
models = map(output$formula, MASS::polr, data = d, Hess = TRUE)
} else{stop("model.type not defined.")}
## Check if any x variables are factors with >2 levels
if("factor" %in% map_chr(d[,x], class))  {
x_factor = x[map_chr(d[,x], class) == "factor"]
factor_with_many_levels = d[,x_factor] %>%
map_dbl(nlevels) > 2
factor_with_many_levels = any(factor_with_many_levels) == TRUE
} else  {factor_with_many_levels = FALSE}
## Add results to data
if(format.output == FALSE)  {
GLMTables = map_dfr(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
} else if(format.output == TRUE)  {
GLMTables = map_dfr(models, formatGLMTable,
intercept = FALSE, exclude.covariates = z)
} else  {stop("format.output must be logical.")}
# Add results if x includes no factor w/ >2 levels
if(factor_with_many_levels == FALSE)  {
output[,colnames(GLMTables)] = GLMTables
}
# Add complex model results if simplify = FALSE
if(simplify == FALSE) {
output$models = models
output$GLMTables = map(models, getGLMTable)
output$assumptions = map(models, check_model)
if(factor_with_many_levels == TRUE) {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and\nindividual model results can be obtained using: $GLMTables[[n]].")
}
}
# Add GLMTables if simplify = TRUE and x includes factor w/ >2 levels
if(simplify == TRUE & factor_with_many_levels == TRUE)  {
message("Note that a factor with >2 levels was present in x.\nTherefore, the output object is more complex and\nindividual model results can be obtained using: $GLMTables[[n]].")
output$GLMTables = map(models, getGLMTable,
intercept = FALSE, exclude.covariates = z)
}
return(output)
}
#' Get a Table of GLM results
#'
#' This function creates a table including output from common GLM models. formatGLMtable offers further formatting for direct inclusion in scientific publications
#' @param model Data needs to be entered that includes relevant variables for the baseline table
#' @param intercept Should intercepts be included in the output? Default is TRUE.
#' @param exclude.covariates Specify covariates that should be excluded from the output.
#' @param fit.indices Should all fit indices from broom::glance be included? Default is FALSE.
#' @param polr.assumptioncheck Only if ordinal logistic regression is used. This calculates a multinomial model using the nnet package with the same formula as the ordinal logistic regression model. If included, a p-value for the proportionality assumption will be included in the output under column name prop.test. Note that this code only works if variables aren't converted inside the fomula (i.e., factor(Y) ~ X does not work).
#' @keywords GLM; table
#' @export
#' @author Nils Kappelmann
#' @examples
#' data(airquality)
#' model = lm(Temp ~ Wind, data = airquality)
#' getGLMTable(model = model)
getGLMTable = function(
model = NULL,
intercept = TRUE,
exclude.covariates = NULL,
fit.indices = FALSE,
polr.assumptioncheck = FALSE
) {
# Load required broom package
require("broom")
# Check if model was specified
if(is.null(model))  {stop("Model must be specified.")}
# Get GLM class
glm_class = class(model)
## Call correct formatting function depending on glm_class
if(identical(glm_class, "lm")) {
output = format_lm(lm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices)
} else if(identical(glm_class, c("glm", "lm"))) {
output = format_loglm(loglm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices)
} else if(identical(glm_class, "polr")) {
output = format_polr(polr.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices)
} else  {stop("GLMTable function not yet defined for model class.")}
## Exclude intercept if indicated
if(intercept == FALSE)  {output = output[output$term != "(Intercept)",]}
## Return output
return(output)
}
# format_lm--------------------------
format_lm = function(
lm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices
) {
## Extract model output
output = broom::tidy(lm.object, conf.int = TRUE, conf.level = 0.95)
## Exclude covariates
if(!is.null(covars.to.exclude))  {
output = excludeCovariates(output, covars.to.exclude)
}
## Exctract fit indices
glance.model = glance(lm.object)
# Delete non-required fit indices
if(fit.stats == FALSE)  {
glance.model = glance.model[, c("r.squared", "adj.r.squared", "nobs")]
}
# Add fit indices to output
if(nrow(output) > 1)  {
for(i in 1:(nrow(output) - 1))  {
glance.model = rbind(rep(NA, ncol(glance.model)), glance.model)
}
}
output[, colnames(glance.model)] = glance.model
## Return output
return(output)
}
# format_loglm-----------------------
format_loglm = function(
loglm.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices
) {
## Extract model output
output = broom::tidy(loglm.object, conf.int = TRUE, conf.level = 0.95)
## Add OR and convert CI
output$OR = exp(output$estimate)
temp.conf.int = exp(output[, c("conf.low", "conf.high")])
output[, c("conf.low", "conf.high")] = NULL
output[, c("conf.low", "conf.high")] = temp.conf.int
rm(temp.conf.int)
## Exclude covariates
if(!is.null(covars.to.exclude))  {
output = excludeCovariates(output, covars.to.exclude)
}
## Exctract fit indices
glance.model = glance(loglm.object)
# Delete non-required fit indices
if(fit.stats == FALSE)  {
glance.model = glance.model[, "nobs"]
}
# Add fit indices to output
if(nrow(output) > 1)  {
for(i in 1:(nrow(output) - 1))  {
glance.model = rbind(rep(NA, ncol(glance.model)), glance.model)
}
}
output[, colnames(glance.model)] = glance.model
## Return output
return(output)
}
# format_polr------------------------
format_polr = function(
polr.object = model,
covars.to.exclude = exclude.covariates,
fit.stats = fit.indices,
polr.check = polr.assumptioncheck
) {
## Extract model output
output = broom::tidy(polr.object, conf.int = TRUE, conf.level = 0.95)
## Delete intercepts and coef.type column
output = output[output$coef.type == "coefficient",]
output$coef.type = NULL
## Add OR and convert CI
output$OR = exp(output$estimate)
temp.conf.int = exp(output[, c("conf.low", "conf.high")])
output[, c("conf.low", "conf.high")] = NULL
output[, c("conf.low", "conf.high")] = temp.conf.int
rm(temp.conf.int)
## Exclude covariates
if(!is.null(covars.to.exclude))  {
output = excludeCovariates(output, covars.to.exclude)
}
## Exctract fit indices
glance.model = glance(polr.object)
# Delete non-required fit indices
if(fit.stats == FALSE)  {
glance.model = glance.model[, "nobs"]
}
# Add fit indices to output
if(nrow(output) > 1)  {
for(i in 1:(nrow(output) - 1))  {
glance.model = rbind(rep(NA, ncol(glance.model)), glance.model)
}
}
output[, colnames(glance.model)] = glance.model
## Run mlm assumption if polr.check = TRUE
if(polr.check == TRUE)  {
# Get mlm data and change colnames
mlm.dat = polr.object$model
mlm.model = nnet::multinom(formula = deparse(formula(polr.object)),
data = polr.object$model,
Hess = "Hessian" %in% names(polr.object))
M1 = logLik(polr.object)
M2 = logLik(mlm.model)
G = -2 * (M1[1] - M2[1])
output[nrow(output), "prop.test"] = pchisq(G, 3, lower.tail = FALSE)
## Remove temporary variables
rm(M1); rm(M2); rm(G)
} else  {output[nrow(output), "prop.test"] = NA}
## Return output
return(output)
}
# format_lm--------------------------
# excludeCovariates------------------
excludeCovariates = function(
x,
exclude.from.x
)  {
x = x[!grepl(paste(exclude.from.x, collapse = "|"), x$term),]
return(x)
}
## Load toy data
data(airquality)
head(airquality)
airquality$Ozone_binary =
ifelse(airquality$Ozone > median(airquality$Ozone, na.rm = TRUE),
1, 0)
airquality$Wind_binary =
ifelse(airquality$Wind > median(airquality$Wind, na.rm = TRUE),
1, 0)
head(airquality)
## Check simplify=FALSE
results = mapGLMTables(data = airquality,
y = "Ozone",
x = c("Solar.R", "Wind"),
z = c("Temp", "Month"),
model.type = "lm",
simplify = FALSE)
results$assumptions[[1]]
require("see")
install.packages("see")
results$assumptions[[1]]
results$assumptions[[2]]
colnames(results)
results[, -c("models", "GLMTables", "assumptions")]
results[, colnames(results) %in% c("models", "GLMTables", "assumptions") == FALSE]
results$assumptions[[1]]
results$assumptions[[2]]
